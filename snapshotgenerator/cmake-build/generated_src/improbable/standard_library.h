// Generated by SpatialOS codegen. DO NOT EDIT!
// source: improbable/standard_library.schema
#ifndef SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
#define SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

#ifndef IMPROBABLE_DLL_API
#define IMPROBABLE_DLL_API
#endif  // IMPROBABLE_DLL_API

namespace improbable {

// Forward declarations.
//----------------------------------------------------------------

class ComponentInterest;
class Coordinates;
class EdgeLength;
class ComponentInterest_BoxConstraint;
class ComponentInterest_CylinderConstraint;
class ComponentInterest_QueryConstraint;
class ComponentInterest_Query;
class ComponentInterest_RelativeBoxConstraint;
class ComponentInterest_RelativeCylinderConstraint;
class ComponentInterest_RelativeSphereConstraint;
class ComponentInterest_SphereConstraint;
class WorkerRequirementSet;
class EntityAclData;
class InterestData;
class MetadataData;
class PersistenceData;
class PositionData;
class WorkerAttributeSet;

namespace detail {
struct IMPROBABLE_DLL_API GenericCommandObject_EntityAcl {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_Metadata {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_Position {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_Persistence {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_Interest {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

} // ::improbable

namespace std {
template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest > {
  size_t operator()(const ::improbable::ComponentInterest& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::Coordinates > {
  size_t operator()(const ::improbable::Coordinates& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::EdgeLength > {
  size_t operator()(const ::improbable::EdgeLength& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_BoxConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_BoxConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_CylinderConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_CylinderConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_QueryConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_QueryConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_Query > {
  size_t operator()(const ::improbable::ComponentInterest_Query& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_RelativeBoxConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_RelativeBoxConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_RelativeCylinderConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_RelativeCylinderConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_RelativeSphereConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_RelativeSphereConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::ComponentInterest_SphereConstraint > {
  size_t operator()(const ::improbable::ComponentInterest_SphereConstraint& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::WorkerRequirementSet > {
  size_t operator()(const ::improbable::WorkerRequirementSet& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::EntityAclData > {
  size_t operator()(const ::improbable::EntityAclData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::InterestData > {
  size_t operator()(const ::improbable::InterestData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::MetadataData > {
  size_t operator()(const ::improbable::MetadataData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::PersistenceData > {
  size_t operator()(const ::improbable::PersistenceData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::PositionData > {
  size_t operator()(const ::improbable::PositionData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::improbable::WorkerAttributeSet > {
  size_t operator()(const ::improbable::WorkerAttributeSet& value) const;
};

} // ::std

namespace improbable {

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API ComponentInterest {
public:
  // Nested types.
  using Query = ComponentInterest_Query;
  using QueryConstraint = ComponentInterest_QueryConstraint;
  using SphereConstraint = ComponentInterest_SphereConstraint;
  using CylinderConstraint = ComponentInterest_CylinderConstraint;
  using BoxConstraint = ComponentInterest_BoxConstraint;
  using RelativeSphereConstraint = ComponentInterest_RelativeSphereConstraint;
  using RelativeCylinderConstraint = ComponentInterest_RelativeCylinderConstraint;
  using RelativeBoxConstraint = ComponentInterest_RelativeBoxConstraint;

  // Main constructor.
  ComponentInterest(const ::worker::List< ::improbable::ComponentInterest_Query >& queries);
  // Creates a new instance with default values for each field.
  ComponentInterest();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest(ComponentInterest&&) = default;
  ComponentInterest(const ComponentInterest&) = default;
  ComponentInterest& operator=(ComponentInterest&&) = default;
  ComponentInterest& operator=(const ComponentInterest&) = default;
  ~ComponentInterest() = default;

  bool operator==(const ComponentInterest&) const;
  bool operator!=(const ComponentInterest&) const;

  // Field queries = 1.
  const ::worker::List< ::improbable::ComponentInterest_Query >& queries() const;
  ::worker::List< ::improbable::ComponentInterest_Query >& queries();
  ComponentInterest& set_queries(const ::worker::List< ::improbable::ComponentInterest_Query >&);

private:
  ::worker::List< ::improbable::ComponentInterest_Query > _queries;
};

class IMPROBABLE_DLL_API Coordinates {
public:
  // Main constructor.
  Coordinates(
      double x,
      double y,
      double z);
  // Creates a new instance with default values for each field.
  Coordinates();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static Coordinates Create() { return {}; }

  // Copyable and moveable.
  Coordinates(Coordinates&&) = default;
  Coordinates(const Coordinates&) = default;
  Coordinates& operator=(Coordinates&&) = default;
  Coordinates& operator=(const Coordinates&) = default;
  ~Coordinates() = default;

  bool operator==(const Coordinates&) const;
  bool operator!=(const Coordinates&) const;

  // Field x = 1.
  double x() const;
  double& x();
  Coordinates& set_x(double);

  // Field y = 2.
  double y() const;
  double& y();
  Coordinates& set_y(double);

  // Field z = 3.
  double z() const;
  double& z();
  Coordinates& set_z(double);

private:
  double _x;
  double _y;
  double _z;
};

class IMPROBABLE_DLL_API EdgeLength {
public:
  // Main constructor.
  EdgeLength(
      double x,
      double y,
      double z);
  // Creates a new instance with default values for each field.
  EdgeLength();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static EdgeLength Create() { return {}; }

  // Copyable and moveable.
  EdgeLength(EdgeLength&&) = default;
  EdgeLength(const EdgeLength&) = default;
  EdgeLength& operator=(EdgeLength&&) = default;
  EdgeLength& operator=(const EdgeLength&) = default;
  ~EdgeLength() = default;

  bool operator==(const EdgeLength&) const;
  bool operator!=(const EdgeLength&) const;

  // Field x = 1.
  double x() const;
  double& x();
  EdgeLength& set_x(double);

  // Field y = 2.
  double y() const;
  double& y();
  EdgeLength& set_y(double);

  // Field z = 3.
  double z() const;
  double& z();
  EdgeLength& set_z(double);

private:
  double _x;
  double _y;
  double _z;
};

class IMPROBABLE_DLL_API ComponentInterest_BoxConstraint {
public:
  // Main constructor.
  ComponentInterest_BoxConstraint(
      const ::improbable::Coordinates& center,
      const ::improbable::EdgeLength& edge_length);
  // Creates a new instance with default values for each field.
  ComponentInterest_BoxConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_BoxConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_BoxConstraint(ComponentInterest_BoxConstraint&&) = default;
  ComponentInterest_BoxConstraint(const ComponentInterest_BoxConstraint&) = default;
  ComponentInterest_BoxConstraint& operator=(ComponentInterest_BoxConstraint&&) = default;
  ComponentInterest_BoxConstraint& operator=(const ComponentInterest_BoxConstraint&) = default;
  ~ComponentInterest_BoxConstraint() = default;

  bool operator==(const ComponentInterest_BoxConstraint&) const;
  bool operator!=(const ComponentInterest_BoxConstraint&) const;

  // Field center = 1.
  const ::improbable::Coordinates& center() const;
  ::improbable::Coordinates& center();
  ComponentInterest_BoxConstraint& set_center(const ::improbable::Coordinates&);

  // Field edge_length = 2.
  const ::improbable::EdgeLength& edge_length() const;
  ::improbable::EdgeLength& edge_length();
  ComponentInterest_BoxConstraint& set_edge_length(const ::improbable::EdgeLength&);

private:
  ::improbable::Coordinates _center;
  ::improbable::EdgeLength _edge_length;
};

class IMPROBABLE_DLL_API ComponentInterest_CylinderConstraint {
public:
  // Main constructor.
  ComponentInterest_CylinderConstraint(
      const ::improbable::Coordinates& center,
      double radius);
  // Creates a new instance with default values for each field.
  ComponentInterest_CylinderConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_CylinderConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_CylinderConstraint(ComponentInterest_CylinderConstraint&&) = default;
  ComponentInterest_CylinderConstraint(const ComponentInterest_CylinderConstraint&) = default;
  ComponentInterest_CylinderConstraint& operator=(ComponentInterest_CylinderConstraint&&) = default;
  ComponentInterest_CylinderConstraint& operator=(const ComponentInterest_CylinderConstraint&) = default;
  ~ComponentInterest_CylinderConstraint() = default;

  bool operator==(const ComponentInterest_CylinderConstraint&) const;
  bool operator!=(const ComponentInterest_CylinderConstraint&) const;

  // Field center = 1.
  const ::improbable::Coordinates& center() const;
  ::improbable::Coordinates& center();
  ComponentInterest_CylinderConstraint& set_center(const ::improbable::Coordinates&);

  // Field radius = 2.
  double radius() const;
  double& radius();
  ComponentInterest_CylinderConstraint& set_radius(double);

private:
  ::improbable::Coordinates _center;
  double _radius;
};

class IMPROBABLE_DLL_API ComponentInterest_QueryConstraint {
public:
  // Main constructor.
  ComponentInterest_QueryConstraint(
      const ::worker::Option< ::improbable::ComponentInterest_SphereConstraint >& sphere_constraint,
      const ::worker::Option< ::improbable::ComponentInterest_CylinderConstraint >& cylinder_constraint,
      const ::worker::Option< ::improbable::ComponentInterest_BoxConstraint >& box_constraint,
      const ::worker::Option< ::improbable::ComponentInterest_RelativeSphereConstraint >& relative_sphere_constraint,
      const ::worker::Option< ::improbable::ComponentInterest_RelativeCylinderConstraint >& relative_cylinder_constraint,
      const ::worker::Option< ::improbable::ComponentInterest_RelativeBoxConstraint >& relative_box_constraint,
      const ::worker::Option< std::int64_t >& entity_id_constraint,
      const ::worker::Option< std::uint32_t >& component_constraint,
      const ::worker::List< ::improbable::ComponentInterest_QueryConstraint >& and_constraint,
      const ::worker::List< ::improbable::ComponentInterest_QueryConstraint >& or_constraint);
  // Creates a new instance with default values for each field.
  ComponentInterest_QueryConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_QueryConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_QueryConstraint(ComponentInterest_QueryConstraint&&) = default;
  ComponentInterest_QueryConstraint(const ComponentInterest_QueryConstraint&) = default;
  ComponentInterest_QueryConstraint& operator=(ComponentInterest_QueryConstraint&&) = default;
  ComponentInterest_QueryConstraint& operator=(const ComponentInterest_QueryConstraint&) = default;
  ~ComponentInterest_QueryConstraint() = default;

  bool operator==(const ComponentInterest_QueryConstraint&) const;
  bool operator!=(const ComponentInterest_QueryConstraint&) const;

  // Field sphere_constraint = 1.
  const ::worker::Option< ::improbable::ComponentInterest_SphereConstraint >& sphere_constraint() const;
  ::worker::Option< ::improbable::ComponentInterest_SphereConstraint >& sphere_constraint();
  ComponentInterest_QueryConstraint& set_sphere_constraint(const ::worker::Option< ::improbable::ComponentInterest_SphereConstraint >&);

  // Field cylinder_constraint = 2.
  const ::worker::Option< ::improbable::ComponentInterest_CylinderConstraint >& cylinder_constraint() const;
  ::worker::Option< ::improbable::ComponentInterest_CylinderConstraint >& cylinder_constraint();
  ComponentInterest_QueryConstraint& set_cylinder_constraint(const ::worker::Option< ::improbable::ComponentInterest_CylinderConstraint >&);

  // Field box_constraint = 3.
  const ::worker::Option< ::improbable::ComponentInterest_BoxConstraint >& box_constraint() const;
  ::worker::Option< ::improbable::ComponentInterest_BoxConstraint >& box_constraint();
  ComponentInterest_QueryConstraint& set_box_constraint(const ::worker::Option< ::improbable::ComponentInterest_BoxConstraint >&);

  // Field relative_sphere_constraint = 4.
  const ::worker::Option< ::improbable::ComponentInterest_RelativeSphereConstraint >& relative_sphere_constraint() const;
  ::worker::Option< ::improbable::ComponentInterest_RelativeSphereConstraint >& relative_sphere_constraint();
  ComponentInterest_QueryConstraint& set_relative_sphere_constraint(const ::worker::Option< ::improbable::ComponentInterest_RelativeSphereConstraint >&);

  // Field relative_cylinder_constraint = 5.
  const ::worker::Option< ::improbable::ComponentInterest_RelativeCylinderConstraint >& relative_cylinder_constraint() const;
  ::worker::Option< ::improbable::ComponentInterest_RelativeCylinderConstraint >& relative_cylinder_constraint();
  ComponentInterest_QueryConstraint& set_relative_cylinder_constraint(const ::worker::Option< ::improbable::ComponentInterest_RelativeCylinderConstraint >&);

  // Field relative_box_constraint = 6.
  const ::worker::Option< ::improbable::ComponentInterest_RelativeBoxConstraint >& relative_box_constraint() const;
  ::worker::Option< ::improbable::ComponentInterest_RelativeBoxConstraint >& relative_box_constraint();
  ComponentInterest_QueryConstraint& set_relative_box_constraint(const ::worker::Option< ::improbable::ComponentInterest_RelativeBoxConstraint >&);

  // Field entity_id_constraint = 7.
  const ::worker::Option< std::int64_t >& entity_id_constraint() const;
  ::worker::Option< std::int64_t >& entity_id_constraint();
  ComponentInterest_QueryConstraint& set_entity_id_constraint(const ::worker::Option< std::int64_t >&);

  // Field component_constraint = 8.
  const ::worker::Option< std::uint32_t >& component_constraint() const;
  ::worker::Option< std::uint32_t >& component_constraint();
  ComponentInterest_QueryConstraint& set_component_constraint(const ::worker::Option< std::uint32_t >&);

  // Field and_constraint = 9.
  const ::worker::List< ::improbable::ComponentInterest_QueryConstraint >& and_constraint() const;
  ::worker::List< ::improbable::ComponentInterest_QueryConstraint >& and_constraint();
  ComponentInterest_QueryConstraint& set_and_constraint(const ::worker::List< ::improbable::ComponentInterest_QueryConstraint >&);

  // Field or_constraint = 10.
  const ::worker::List< ::improbable::ComponentInterest_QueryConstraint >& or_constraint() const;
  ::worker::List< ::improbable::ComponentInterest_QueryConstraint >& or_constraint();
  ComponentInterest_QueryConstraint& set_or_constraint(const ::worker::List< ::improbable::ComponentInterest_QueryConstraint >&);

private:
  ::worker::Option< ::improbable::ComponentInterest_SphereConstraint > _sphere_constraint;
  ::worker::Option< ::improbable::ComponentInterest_CylinderConstraint > _cylinder_constraint;
  ::worker::Option< ::improbable::ComponentInterest_BoxConstraint > _box_constraint;
  ::worker::Option< ::improbable::ComponentInterest_RelativeSphereConstraint > _relative_sphere_constraint;
  ::worker::Option< ::improbable::ComponentInterest_RelativeCylinderConstraint > _relative_cylinder_constraint;
  ::worker::Option< ::improbable::ComponentInterest_RelativeBoxConstraint > _relative_box_constraint;
  ::worker::Option< std::int64_t > _entity_id_constraint;
  ::worker::Option< std::uint32_t > _component_constraint;
  ::worker::List< ::improbable::ComponentInterest_QueryConstraint > _and_constraint;
  ::worker::List< ::improbable::ComponentInterest_QueryConstraint > _or_constraint;
};

class IMPROBABLE_DLL_API ComponentInterest_Query {
public:
  // Main constructor.
  ComponentInterest_Query(
      const ::improbable::ComponentInterest_QueryConstraint& constraint,
      const ::worker::Option< bool >& full_snapshot_result,
      const ::worker::List< std::uint32_t >& result_component_id,
      const ::worker::Option< float >& frequency);
  // Creates a new instance with default values for each field.
  ComponentInterest_Query();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_Query Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_Query(ComponentInterest_Query&&) = default;
  ComponentInterest_Query(const ComponentInterest_Query&) = default;
  ComponentInterest_Query& operator=(ComponentInterest_Query&&) = default;
  ComponentInterest_Query& operator=(const ComponentInterest_Query&) = default;
  ~ComponentInterest_Query() = default;

  bool operator==(const ComponentInterest_Query&) const;
  bool operator!=(const ComponentInterest_Query&) const;

  // Field constraint = 1.
  const ::improbable::ComponentInterest_QueryConstraint& constraint() const;
  ::improbable::ComponentInterest_QueryConstraint& constraint();
  ComponentInterest_Query& set_constraint(const ::improbable::ComponentInterest_QueryConstraint&);

  // Field full_snapshot_result = 2.
  const ::worker::Option< bool >& full_snapshot_result() const;
  ::worker::Option< bool >& full_snapshot_result();
  ComponentInterest_Query& set_full_snapshot_result(const ::worker::Option< bool >&);

  // Field result_component_id = 3.
  const ::worker::List< std::uint32_t >& result_component_id() const;
  ::worker::List< std::uint32_t >& result_component_id();
  ComponentInterest_Query& set_result_component_id(const ::worker::List< std::uint32_t >&);

  // Field frequency = 4.
  const ::worker::Option< float >& frequency() const;
  ::worker::Option< float >& frequency();
  ComponentInterest_Query& set_frequency(const ::worker::Option< float >&);

private:
  ::improbable::ComponentInterest_QueryConstraint _constraint;
  ::worker::Option< bool > _full_snapshot_result;
  ::worker::List< std::uint32_t > _result_component_id;
  ::worker::Option< float > _frequency;
};

class IMPROBABLE_DLL_API ComponentInterest_RelativeBoxConstraint {
public:
  // Main constructor.
  ComponentInterest_RelativeBoxConstraint(const ::improbable::EdgeLength& edge_length);
  // Creates a new instance with default values for each field.
  ComponentInterest_RelativeBoxConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_RelativeBoxConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_RelativeBoxConstraint(ComponentInterest_RelativeBoxConstraint&&) = default;
  ComponentInterest_RelativeBoxConstraint(const ComponentInterest_RelativeBoxConstraint&) = default;
  ComponentInterest_RelativeBoxConstraint& operator=(ComponentInterest_RelativeBoxConstraint&&) = default;
  ComponentInterest_RelativeBoxConstraint& operator=(const ComponentInterest_RelativeBoxConstraint&) = default;
  ~ComponentInterest_RelativeBoxConstraint() = default;

  bool operator==(const ComponentInterest_RelativeBoxConstraint&) const;
  bool operator!=(const ComponentInterest_RelativeBoxConstraint&) const;

  // Field edge_length = 1.
  const ::improbable::EdgeLength& edge_length() const;
  ::improbable::EdgeLength& edge_length();
  ComponentInterest_RelativeBoxConstraint& set_edge_length(const ::improbable::EdgeLength&);

private:
  ::improbable::EdgeLength _edge_length;
};

class IMPROBABLE_DLL_API ComponentInterest_RelativeCylinderConstraint {
public:
  // Main constructor.
  ComponentInterest_RelativeCylinderConstraint(double radius);
  // Creates a new instance with default values for each field.
  ComponentInterest_RelativeCylinderConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_RelativeCylinderConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_RelativeCylinderConstraint(ComponentInterest_RelativeCylinderConstraint&&) = default;
  ComponentInterest_RelativeCylinderConstraint(const ComponentInterest_RelativeCylinderConstraint&) = default;
  ComponentInterest_RelativeCylinderConstraint& operator=(ComponentInterest_RelativeCylinderConstraint&&) = default;
  ComponentInterest_RelativeCylinderConstraint& operator=(const ComponentInterest_RelativeCylinderConstraint&) = default;
  ~ComponentInterest_RelativeCylinderConstraint() = default;

  bool operator==(const ComponentInterest_RelativeCylinderConstraint&) const;
  bool operator!=(const ComponentInterest_RelativeCylinderConstraint&) const;

  // Field radius = 1.
  double radius() const;
  double& radius();
  ComponentInterest_RelativeCylinderConstraint& set_radius(double);

private:
  double _radius;
};

class IMPROBABLE_DLL_API ComponentInterest_RelativeSphereConstraint {
public:
  // Main constructor.
  ComponentInterest_RelativeSphereConstraint(double radius);
  // Creates a new instance with default values for each field.
  ComponentInterest_RelativeSphereConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_RelativeSphereConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_RelativeSphereConstraint(ComponentInterest_RelativeSphereConstraint&&) = default;
  ComponentInterest_RelativeSphereConstraint(const ComponentInterest_RelativeSphereConstraint&) = default;
  ComponentInterest_RelativeSphereConstraint& operator=(ComponentInterest_RelativeSphereConstraint&&) = default;
  ComponentInterest_RelativeSphereConstraint& operator=(const ComponentInterest_RelativeSphereConstraint&) = default;
  ~ComponentInterest_RelativeSphereConstraint() = default;

  bool operator==(const ComponentInterest_RelativeSphereConstraint&) const;
  bool operator!=(const ComponentInterest_RelativeSphereConstraint&) const;

  // Field radius = 1.
  double radius() const;
  double& radius();
  ComponentInterest_RelativeSphereConstraint& set_radius(double);

private:
  double _radius;
};

class IMPROBABLE_DLL_API ComponentInterest_SphereConstraint {
public:
  // Main constructor.
  ComponentInterest_SphereConstraint(
      const ::improbable::Coordinates& center,
      double radius);
  // Creates a new instance with default values for each field.
  ComponentInterest_SphereConstraint();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ComponentInterest_SphereConstraint Create() { return {}; }

  // Copyable and moveable.
  ComponentInterest_SphereConstraint(ComponentInterest_SphereConstraint&&) = default;
  ComponentInterest_SphereConstraint(const ComponentInterest_SphereConstraint&) = default;
  ComponentInterest_SphereConstraint& operator=(ComponentInterest_SphereConstraint&&) = default;
  ComponentInterest_SphereConstraint& operator=(const ComponentInterest_SphereConstraint&) = default;
  ~ComponentInterest_SphereConstraint() = default;

  bool operator==(const ComponentInterest_SphereConstraint&) const;
  bool operator!=(const ComponentInterest_SphereConstraint&) const;

  // Field center = 1.
  const ::improbable::Coordinates& center() const;
  ::improbable::Coordinates& center();
  ComponentInterest_SphereConstraint& set_center(const ::improbable::Coordinates&);

  // Field radius = 2.
  double radius() const;
  double& radius();
  ComponentInterest_SphereConstraint& set_radius(double);

private:
  ::improbable::Coordinates _center;
  double _radius;
};

class IMPROBABLE_DLL_API WorkerRequirementSet {
public:
  // Main constructor.
  WorkerRequirementSet(const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set);
  // Creates a new instance with default values for each field.
  WorkerRequirementSet();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static WorkerRequirementSet Create() { return {}; }

  // Copyable and moveable.
  WorkerRequirementSet(WorkerRequirementSet&&) = default;
  WorkerRequirementSet(const WorkerRequirementSet&) = default;
  WorkerRequirementSet& operator=(WorkerRequirementSet&&) = default;
  WorkerRequirementSet& operator=(const WorkerRequirementSet&) = default;
  ~WorkerRequirementSet() = default;

  bool operator==(const WorkerRequirementSet&) const;
  bool operator!=(const WorkerRequirementSet&) const;

  // Field attribute_set = 1.
  const ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set() const;
  ::worker::List< ::improbable::WorkerAttributeSet >& attribute_set();
  WorkerRequirementSet& set_attribute_set(const ::worker::List< ::improbable::WorkerAttributeSet >&);

private:
  ::worker::List< ::improbable::WorkerAttributeSet > _attribute_set;
};

class IMPROBABLE_DLL_API EntityAclData {
public:
  // Main constructor.
  EntityAclData(
      const ::improbable::WorkerRequirementSet& read_acl,
      const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& component_write_acl);
  // Creates a new instance with default values for each field.
  EntityAclData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static EntityAclData Create() { return {}; }

  // Copyable and moveable.
  EntityAclData(EntityAclData&&) = default;
  EntityAclData(const EntityAclData&) = default;
  EntityAclData& operator=(EntityAclData&&) = default;
  EntityAclData& operator=(const EntityAclData&) = default;
  ~EntityAclData() = default;

  bool operator==(const EntityAclData&) const;
  bool operator!=(const EntityAclData&) const;

  // Field read_acl = 1.
  const ::improbable::WorkerRequirementSet& read_acl() const;
  ::improbable::WorkerRequirementSet& read_acl();
  EntityAclData& set_read_acl(const ::improbable::WorkerRequirementSet&);

  // Field component_write_acl = 2.
  const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& component_write_acl() const;
  ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >& component_write_acl();
  EntityAclData& set_component_write_acl(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >&);

private:
  ::improbable::WorkerRequirementSet _read_acl;
  ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > _component_write_acl;
};

class IMPROBABLE_DLL_API InterestData {
public:
  // Main constructor.
  InterestData(const ::worker::Map< std::uint32_t, ::improbable::ComponentInterest >& component_interest);
  // Creates a new instance with default values for each field.
  InterestData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static InterestData Create() { return {}; }

  // Copyable and moveable.
  InterestData(InterestData&&) = default;
  InterestData(const InterestData&) = default;
  InterestData& operator=(InterestData&&) = default;
  InterestData& operator=(const InterestData&) = default;
  ~InterestData() = default;

  bool operator==(const InterestData&) const;
  bool operator!=(const InterestData&) const;

  // Field component_interest = 1.
  const ::worker::Map< std::uint32_t, ::improbable::ComponentInterest >& component_interest() const;
  ::worker::Map< std::uint32_t, ::improbable::ComponentInterest >& component_interest();
  InterestData& set_component_interest(const ::worker::Map< std::uint32_t, ::improbable::ComponentInterest >&);

private:
  ::worker::Map< std::uint32_t, ::improbable::ComponentInterest > _component_interest;
};

class IMPROBABLE_DLL_API MetadataData {
public:
  // Main constructor.
  MetadataData(const std::string& entity_type);
  // Creates a new instance with default values for each field.
  MetadataData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static MetadataData Create() { return {}; }

  // Copyable and moveable.
  MetadataData(MetadataData&&) = default;
  MetadataData(const MetadataData&) = default;
  MetadataData& operator=(MetadataData&&) = default;
  MetadataData& operator=(const MetadataData&) = default;
  ~MetadataData() = default;

  bool operator==(const MetadataData&) const;
  bool operator!=(const MetadataData&) const;

  // Field entity_type = 1.
  const std::string& entity_type() const;
  std::string& entity_type();
  MetadataData& set_entity_type(const std::string&);

private:
  std::string _entity_type;
};

class IMPROBABLE_DLL_API PersistenceData {
public:
  // Creates a new instance with default values for each field.
  PersistenceData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static PersistenceData Create() { return {}; }

  // Copyable and moveable.
  PersistenceData(PersistenceData&&) = default;
  PersistenceData(const PersistenceData&) = default;
  PersistenceData& operator=(PersistenceData&&) = default;
  PersistenceData& operator=(const PersistenceData&) = default;
  ~PersistenceData() = default;

  bool operator==(const PersistenceData&) const;
  bool operator!=(const PersistenceData&) const;
};

class IMPROBABLE_DLL_API PositionData {
public:
  // Main constructor.
  PositionData(const ::improbable::Coordinates& coords);
  // Creates a new instance with default values for each field.
  PositionData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static PositionData Create() { return {}; }

  // Copyable and moveable.
  PositionData(PositionData&&) = default;
  PositionData(const PositionData&) = default;
  PositionData& operator=(PositionData&&) = default;
  PositionData& operator=(const PositionData&) = default;
  ~PositionData() = default;

  bool operator==(const PositionData&) const;
  bool operator!=(const PositionData&) const;

  // Field coords = 1.
  const ::improbable::Coordinates& coords() const;
  ::improbable::Coordinates& coords();
  PositionData& set_coords(const ::improbable::Coordinates&);

private:
  ::improbable::Coordinates _coords;
};

class IMPROBABLE_DLL_API WorkerAttributeSet {
public:
  // Main constructor.
  WorkerAttributeSet(const ::worker::List< std::string >& attribute);
  // Creates a new instance with default values for each field.
  WorkerAttributeSet();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static WorkerAttributeSet Create() { return {}; }

  // Copyable and moveable.
  WorkerAttributeSet(WorkerAttributeSet&&) = default;
  WorkerAttributeSet(const WorkerAttributeSet&) = default;
  WorkerAttributeSet& operator=(WorkerAttributeSet&&) = default;
  WorkerAttributeSet& operator=(const WorkerAttributeSet&) = default;
  ~WorkerAttributeSet() = default;

  bool operator==(const WorkerAttributeSet&) const;
  bool operator!=(const WorkerAttributeSet&) const;

  // Field attribute = 1.
  const ::worker::List< std::string >& attribute() const;
  ::worker::List< std::string >& attribute();
  WorkerAttributeSet& set_attribute(const ::worker::List< std::string >&);

private:
  ::worker::List< std::string > _attribute;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::EntityAcl;
 *
 *   EntityAcl::Update update;
 *   connection.SendComponentUpdate< EntityAcl >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< EntityAcl >(
 *       [&](const worker::ComponentUpdateOp< EntityAcl >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         EntityAcl::Update update = op.GetUpdate();
 *       });
 *
 *   EntityAcl::Data data = entity.Get< EntityAcl >();
 */
struct IMPROBABLE_DLL_API EntityAcl : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 50;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::EntityAclData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_EntityAcl;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::EntityAclData object. */
    static Update FromInitialData(const ::improbable::EntityAclData& data);

    /**
     * Converts to a ::improbable::EntityAclData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::EntityAclData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::EntityAclData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::EntityAclData&) const;

    // Field read_acl = 1.
    const ::worker::Option< ::improbable::WorkerRequirementSet >& read_acl() const;
    ::worker::Option< ::improbable::WorkerRequirementSet >& read_acl();
    Update& set_read_acl(const ::improbable::WorkerRequirementSet&);

    // Field component_write_acl = 2.
    const ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > >& component_write_acl() const;
    ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > >& component_write_acl();
    Update& set_component_write_acl(const ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet >&);

  private:
    ::worker::Option< ::improbable::WorkerRequirementSet > _read_acl;
    ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::WorkerRequirementSet > > _component_write_acl;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Metadata;
 *
 *   Metadata::Update update;
 *   connection.SendComponentUpdate< Metadata >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Metadata >(
 *       [&](const worker::ComponentUpdateOp< Metadata >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Metadata::Update update = op.GetUpdate();
 *       });
 *
 *   Metadata::Data data = entity.Get< Metadata >();
 */
struct IMPROBABLE_DLL_API Metadata : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 53;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::MetadataData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Metadata;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::MetadataData object. */
    static Update FromInitialData(const ::improbable::MetadataData& data);

    /**
     * Converts to a ::improbable::MetadataData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::MetadataData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::MetadataData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::MetadataData&) const;

    // Field entity_type = 1.
    const ::worker::Option< std::string >& entity_type() const;
    ::worker::Option< std::string >& entity_type();
    Update& set_entity_type(const std::string&);

  private:
    ::worker::Option< std::string > _entity_type;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Position;
 *
 *   Position::Update update;
 *   connection.SendComponentUpdate< Position >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Position >(
 *       [&](const worker::ComponentUpdateOp< Position >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Position::Update update = op.GetUpdate();
 *       });
 *
 *   Position::Data data = entity.Get< Position >();
 */
struct IMPROBABLE_DLL_API Position : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 54;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::PositionData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Position;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::PositionData object. */
    static Update FromInitialData(const ::improbable::PositionData& data);

    /**
     * Converts to a ::improbable::PositionData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::PositionData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::PositionData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::PositionData&) const;

    // Field coords = 1.
    const ::worker::Option< ::improbable::Coordinates >& coords() const;
    ::worker::Option< ::improbable::Coordinates >& coords();
    Update& set_coords(const ::improbable::Coordinates&);

  private:
    ::worker::Option< ::improbable::Coordinates > _coords;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Persistence;
 *
 *   Persistence::Update update;
 *   connection.SendComponentUpdate< Persistence >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Persistence >(
 *       [&](const worker::ComponentUpdateOp< Persistence >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Persistence::Update update = op.GetUpdate();
 *       });
 *
 *   Persistence::Data data = entity.Get< Persistence >();
 */
struct IMPROBABLE_DLL_API Persistence : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 55;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::PersistenceData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Persistence;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::PersistenceData object. */
    static Update FromInitialData(const ::improbable::PersistenceData& data);

    /**
     * Converts to a ::improbable::PersistenceData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::PersistenceData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::PersistenceData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::PersistenceData&) const;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::improbable::Interest;
 *
 *   Interest::Update update;
 *   connection.SendComponentUpdate< Interest >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Interest >(
 *       [&](const worker::ComponentUpdateOp< Interest >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Interest::Update update = op.GetUpdate();
 *       });
 *
 *   Interest::Data data = entity.Get< Interest >();
 */
struct IMPROBABLE_DLL_API Interest : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 58;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::improbable::InterestData;
  using GenericCommandObject = ::improbable::detail::GenericCommandObject_Interest;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::improbable::InterestData object. */
    static Update FromInitialData(const ::improbable::InterestData& data);

    /**
     * Converts to a ::improbable::InterestData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::improbable::InterestData ToInitialData() const;

    /**
     * Replaces fields in the given ::improbable::InterestData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::improbable::InterestData&) const;

    // Field component_interest = 1.
    const ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::ComponentInterest > >& component_interest() const;
    ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::ComponentInterest > >& component_interest();
    Update& set_component_interest(const ::worker::Map< std::uint32_t, ::improbable::ComponentInterest >&);

  private:
    ::worker::Option< ::worker::Map< std::uint32_t, ::improbable::ComponentInterest > > _component_interest;
  };

};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_ComponentInterest(const ::improbable::ComponentInterest&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest Read_ComponentInterest(::worker::detail::internal::Pbio_Object*);

void Write_Coordinates(const ::improbable::Coordinates&, ::worker::detail::internal::Pbio_Object*);

::improbable::Coordinates Read_Coordinates(::worker::detail::internal::Pbio_Object*);

void Write_EdgeLength(const ::improbable::EdgeLength&, ::worker::detail::internal::Pbio_Object*);

::improbable::EdgeLength Read_EdgeLength(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_BoxConstraint(const ::improbable::ComponentInterest_BoxConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_BoxConstraint Read_ComponentInterest_BoxConstraint(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_CylinderConstraint(const ::improbable::ComponentInterest_CylinderConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_CylinderConstraint Read_ComponentInterest_CylinderConstraint(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_QueryConstraint(const ::improbable::ComponentInterest_QueryConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_QueryConstraint Read_ComponentInterest_QueryConstraint(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_Query(const ::improbable::ComponentInterest_Query&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_Query Read_ComponentInterest_Query(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_RelativeBoxConstraint(const ::improbable::ComponentInterest_RelativeBoxConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_RelativeBoxConstraint Read_ComponentInterest_RelativeBoxConstraint(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_RelativeCylinderConstraint(const ::improbable::ComponentInterest_RelativeCylinderConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_RelativeCylinderConstraint Read_ComponentInterest_RelativeCylinderConstraint(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_RelativeSphereConstraint(const ::improbable::ComponentInterest_RelativeSphereConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_RelativeSphereConstraint Read_ComponentInterest_RelativeSphereConstraint(::worker::detail::internal::Pbio_Object*);

void Write_ComponentInterest_SphereConstraint(const ::improbable::ComponentInterest_SphereConstraint&, ::worker::detail::internal::Pbio_Object*);

::improbable::ComponentInterest_SphereConstraint Read_ComponentInterest_SphereConstraint(::worker::detail::internal::Pbio_Object*);

void Write_WorkerRequirementSet(const ::improbable::WorkerRequirementSet&, ::worker::detail::internal::Pbio_Object*);

::improbable::WorkerRequirementSet Read_WorkerRequirementSet(::worker::detail::internal::Pbio_Object*);

void Write_EntityAclData(const ::improbable::EntityAclData&, ::worker::detail::internal::Pbio_Object*);

::improbable::EntityAclData Read_EntityAclData(::worker::detail::internal::Pbio_Object*);

void Write_InterestData(const ::improbable::InterestData&, ::worker::detail::internal::Pbio_Object*);

::improbable::InterestData Read_InterestData(::worker::detail::internal::Pbio_Object*);

void Write_MetadataData(const ::improbable::MetadataData&, ::worker::detail::internal::Pbio_Object*);

::improbable::MetadataData Read_MetadataData(::worker::detail::internal::Pbio_Object*);

void Write_PersistenceData(const ::improbable::PersistenceData&, ::worker::detail::internal::Pbio_Object*);

::improbable::PersistenceData Read_PersistenceData(::worker::detail::internal::Pbio_Object*);

void Write_PositionData(const ::improbable::PositionData&, ::worker::detail::internal::Pbio_Object*);

::improbable::PositionData Read_PositionData(::worker::detail::internal::Pbio_Object*);

void Write_WorkerAttributeSet(const ::improbable::WorkerAttributeSet&, ::worker::detail::internal::Pbio_Object*);

::improbable::WorkerAttributeSet Read_WorkerAttributeSet(::worker::detail::internal::Pbio_Object*);

}  // ::detail
}  // ::improbable

#endif  // SPATIALOS_SCHEMA_improbable_standard_library_schema_15375418286384799311_INCLUDED

// Generated by SpatialOS codegen. DO NOT EDIT!
// source: othello.schema
#ifndef SPATIALOS_SCHEMA_othello_schema_15265274617727986021_INCLUDED
#define SPATIALOS_SCHEMA_othello_schema_15265274617727986021_INCLUDED
#include <improbable/collections.h>
#include <improbable/worker.h>
#include <cstddef>
#include <cstdint>
#include <set>
#include <string>

#ifndef IMPROBABLE_DLL_API
#define IMPROBABLE_DLL_API
#endif  // IMPROBABLE_DLL_API

namespace othello {

// Forward declarations.
//----------------------------------------------------------------

class ColorData;
class CreatePlayerResult;
class FindColorRequest;
class GameData;
class PlaceDiscRequest;
class PlayerData;
class SuccessResult;
class TurnTakerData;
class Void;

namespace detail {
struct IMPROBABLE_DLL_API GenericCommandObject_Game {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::othello::CreatePlayerResult,
      ::othello::PlaceDiscRequest,
      ::othello::SuccessResult,
      ::othello::Void> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_Color {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::othello::FindColorRequest,
      ::othello::SuccessResult> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_Player {
  std::uint32_t CommandId;
  ::worker::Variant<> CommandObject;
};
struct IMPROBABLE_DLL_API GenericCommandObject_TurnTaker {
  std::uint32_t CommandId;
  ::worker::Variant<
      ::othello::Void> CommandObject;
};
}  // ::detail

// Enumerations.
//----------------------------------------------------------------

IMPROBABLE_DLL_API enum class Direction : std::uint32_t {
  NORTH = 0,
  EAST = 1,
  SOUTH = 2,
  WEST = 3,
};

} // ::othello

namespace std {
template <>
struct IMPROBABLE_DLL_API hash< ::othello::Direction > {
  size_t operator()(::othello::Direction value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::ColorData > {
  size_t operator()(const ::othello::ColorData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::CreatePlayerResult > {
  size_t operator()(const ::othello::CreatePlayerResult& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::FindColorRequest > {
  size_t operator()(const ::othello::FindColorRequest& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::GameData > {
  size_t operator()(const ::othello::GameData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::PlaceDiscRequest > {
  size_t operator()(const ::othello::PlaceDiscRequest& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::PlayerData > {
  size_t operator()(const ::othello::PlayerData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::SuccessResult > {
  size_t operator()(const ::othello::SuccessResult& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::TurnTakerData > {
  size_t operator()(const ::othello::TurnTakerData& value) const;
};

template <>
struct IMPROBABLE_DLL_API hash< ::othello::Void > {
  size_t operator()(const ::othello::Void& value) const;
};

} // ::std

namespace othello {

// Data classes.
//----------------------------------------------------------------

class IMPROBABLE_DLL_API ColorData {
public:
  // Main constructor.
  ColorData(bool black);
  // Creates a new instance with default values for each field.
  ColorData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static ColorData Create() { return {}; }

  // Copyable and moveable.
  ColorData(ColorData&&) = default;
  ColorData(const ColorData&) = default;
  ColorData& operator=(ColorData&&) = default;
  ColorData& operator=(const ColorData&) = default;
  ~ColorData() = default;

  bool operator==(const ColorData&) const;
  bool operator!=(const ColorData&) const;

  // Field black = 1.
  bool black() const;
  bool& black();
  ColorData& set_black(bool);

private:
  bool _black;
};

class IMPROBABLE_DLL_API CreatePlayerResult {
public:
  // Main constructor.
  CreatePlayerResult(bool black);
  // Creates a new instance with default values for each field.
  CreatePlayerResult();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static CreatePlayerResult Create() { return {}; }

  // Copyable and moveable.
  CreatePlayerResult(CreatePlayerResult&&) = default;
  CreatePlayerResult(const CreatePlayerResult&) = default;
  CreatePlayerResult& operator=(CreatePlayerResult&&) = default;
  CreatePlayerResult& operator=(const CreatePlayerResult&) = default;
  ~CreatePlayerResult() = default;

  bool operator==(const CreatePlayerResult&) const;
  bool operator!=(const CreatePlayerResult&) const;

  // Field black = 1.
  bool black() const;
  bool& black();
  CreatePlayerResult& set_black(bool);

private:
  bool _black;
};

class IMPROBABLE_DLL_API FindColorRequest {
public:
  // Main constructor.
  FindColorRequest(
      ::othello::Direction dir,
      bool black);
  // Creates a new instance with default values for each field.
  FindColorRequest();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static FindColorRequest Create() { return {}; }

  // Copyable and moveable.
  FindColorRequest(FindColorRequest&&) = default;
  FindColorRequest(const FindColorRequest&) = default;
  FindColorRequest& operator=(FindColorRequest&&) = default;
  FindColorRequest& operator=(const FindColorRequest&) = default;
  ~FindColorRequest() = default;

  bool operator==(const FindColorRequest&) const;
  bool operator!=(const FindColorRequest&) const;

  // Field dir = 1.
  ::othello::Direction dir() const;
  ::othello::Direction& dir();
  FindColorRequest& set_dir(::othello::Direction);

  // Field black = 2.
  bool black() const;
  bool& black();
  FindColorRequest& set_black(bool);

private:
  ::othello::Direction _dir;
  bool _black;
};

class IMPROBABLE_DLL_API GameData {
public:
  // Creates a new instance with default values for each field.
  GameData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static GameData Create() { return {}; }

  // Copyable and moveable.
  GameData(GameData&&) = default;
  GameData(const GameData&) = default;
  GameData& operator=(GameData&&) = default;
  GameData& operator=(const GameData&) = default;
  ~GameData() = default;

  bool operator==(const GameData&) const;
  bool operator!=(const GameData&) const;
};

class IMPROBABLE_DLL_API PlaceDiscRequest {
public:
  // Main constructor.
  PlaceDiscRequest(
      std::int64_t x,
      std::int64_t z);
  // Creates a new instance with default values for each field.
  PlaceDiscRequest();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static PlaceDiscRequest Create() { return {}; }

  // Copyable and moveable.
  PlaceDiscRequest(PlaceDiscRequest&&) = default;
  PlaceDiscRequest(const PlaceDiscRequest&) = default;
  PlaceDiscRequest& operator=(PlaceDiscRequest&&) = default;
  PlaceDiscRequest& operator=(const PlaceDiscRequest&) = default;
  ~PlaceDiscRequest() = default;

  bool operator==(const PlaceDiscRequest&) const;
  bool operator!=(const PlaceDiscRequest&) const;

  // Field x = 1.
  std::int64_t x() const;
  std::int64_t& x();
  PlaceDiscRequest& set_x(std::int64_t);

  // Field z = 2.
  std::int64_t z() const;
  std::int64_t& z();
  PlaceDiscRequest& set_z(std::int64_t);

private:
  std::int64_t _x;
  std::int64_t _z;
};

class IMPROBABLE_DLL_API PlayerData {
public:
  // Main constructor.
  PlayerData(const std::string& worker);
  // Creates a new instance with default values for each field.
  PlayerData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static PlayerData Create() { return {}; }

  // Copyable and moveable.
  PlayerData(PlayerData&&) = default;
  PlayerData(const PlayerData&) = default;
  PlayerData& operator=(PlayerData&&) = default;
  PlayerData& operator=(const PlayerData&) = default;
  ~PlayerData() = default;

  bool operator==(const PlayerData&) const;
  bool operator!=(const PlayerData&) const;

  // Field worker = 1.
  const std::string& worker() const;
  std::string& worker();
  PlayerData& set_worker(const std::string&);

private:
  std::string _worker;
};

class IMPROBABLE_DLL_API SuccessResult {
public:
  // Main constructor.
  SuccessResult(bool success);
  // Creates a new instance with default values for each field.
  SuccessResult();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static SuccessResult Create() { return {}; }

  // Copyable and moveable.
  SuccessResult(SuccessResult&&) = default;
  SuccessResult(const SuccessResult&) = default;
  SuccessResult& operator=(SuccessResult&&) = default;
  SuccessResult& operator=(const SuccessResult&) = default;
  ~SuccessResult() = default;

  bool operator==(const SuccessResult&) const;
  bool operator!=(const SuccessResult&) const;

  // Field success = 1.
  bool success() const;
  bool& success();
  SuccessResult& set_success(bool);

private:
  bool _success;
};

class IMPROBABLE_DLL_API TurnTakerData {
public:
  // Creates a new instance with default values for each field.
  TurnTakerData();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static TurnTakerData Create() { return {}; }

  // Copyable and moveable.
  TurnTakerData(TurnTakerData&&) = default;
  TurnTakerData(const TurnTakerData&) = default;
  TurnTakerData& operator=(TurnTakerData&&) = default;
  TurnTakerData& operator=(const TurnTakerData&) = default;
  ~TurnTakerData() = default;

  bool operator==(const TurnTakerData&) const;
  bool operator!=(const TurnTakerData&) const;
};

class IMPROBABLE_DLL_API Void {
public:
  // Creates a new instance with default values for each field.
  Void();
  // Creates a new instance with default values for each field. This is
  // equivalent to a default-constructed instance.
  static Void Create() { return {}; }

  // Copyable and moveable.
  Void(Void&&) = default;
  Void(const Void&) = default;
  Void& operator=(Void&&) = default;
  Void& operator=(const Void&) = default;
  ~Void() = default;

  bool operator==(const Void&) const;
  bool operator!=(const Void&) const;
};

// Component metaclasses and update classes.
//----------------------------------------------------------------

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::othello::Game;
 *
 *   Game::Update update;
 *   connection.SendComponentUpdate< Game >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Game >(
 *       [&](const worker::ComponentUpdateOp< Game >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Game::Update update = op.GetUpdate();
 *       });
 *
 *   Game::Data data = entity.Get< Game >();
 */
struct IMPROBABLE_DLL_API Game : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 1000;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::othello::GameData;
  using GenericCommandObject = ::othello::detail::GenericCommandObject_Game;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::othello::GameData object. */
    static Update FromInitialData(const ::othello::GameData& data);

    /**
     * Converts to a ::othello::GameData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::othello::GameData ToInitialData() const;

    /**
     * Replaces fields in the given ::othello::GameData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::othello::GameData&) const;
  };

  /**
   * Command metaclasses for the Game component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class IMPROBABLE_DLL_API Commands {
  public:
    class CreatePlayer {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ::othello::Game;
      using Request = ::othello::Void;
      using Response = ::othello::CreatePlayerResult;
    };
    class PlaceDisc {
    public:
      static constexpr const std::uint32_t CommandId = 2;
      using ComponentMetaclass = ::othello::Game;
      using Request = ::othello::PlaceDiscRequest;
      using Response = ::othello::SuccessResult;
    };
  };
};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::othello::Color;
 *
 *   Color::Update update;
 *   connection.SendComponentUpdate< Color >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Color >(
 *       [&](const worker::ComponentUpdateOp< Color >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Color::Update update = op.GetUpdate();
 *       });
 *
 *   Color::Data data = entity.Get< Color >();
 */
struct IMPROBABLE_DLL_API Color : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 1001;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::othello::ColorData;
  using GenericCommandObject = ::othello::detail::GenericCommandObject_Color;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::othello::ColorData object. */
    static Update FromInitialData(const ::othello::ColorData& data);

    /**
     * Converts to a ::othello::ColorData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::othello::ColorData ToInitialData() const;

    /**
     * Replaces fields in the given ::othello::ColorData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::othello::ColorData&) const;

    // Field black = 1.
    const ::worker::Option< bool >& black() const;
    ::worker::Option< bool >& black();
    Update& set_black(bool);

  private:
    ::worker::Option< bool > _black;
  };

  /**
   * Command metaclasses for the Color component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class IMPROBABLE_DLL_API Commands {
  public:
    class FindColor {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ::othello::Color;
      using Request = ::othello::FindColorRequest;
      using Response = ::othello::SuccessResult;
    };
  };
};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::othello::Player;
 *
 *   Player::Update update;
 *   connection.SendComponentUpdate< Player >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< Player >(
 *       [&](const worker::ComponentUpdateOp< Player >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         Player::Update update = op.GetUpdate();
 *       });
 *
 *   Player::Data data = entity.Get< Player >();
 */
struct IMPROBABLE_DLL_API Player : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 1002;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::othello::PlayerData;
  using GenericCommandObject = ::othello::detail::GenericCommandObject_Player;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::othello::PlayerData object. */
    static Update FromInitialData(const ::othello::PlayerData& data);

    /**
     * Converts to a ::othello::PlayerData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::othello::PlayerData ToInitialData() const;

    /**
     * Replaces fields in the given ::othello::PlayerData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::othello::PlayerData&) const;

    // Field worker = 1.
    const ::worker::Option< std::string >& worker() const;
    ::worker::Option< std::string >& worker();
    Update& set_worker(const std::string&);

  private:
    ::worker::Option< std::string > _worker;
  };

};

/**
 * This type can be supplied as the template parameter to all component-related templated types
 * and methods in the C++ worker API. For example:
 *
 *   using ::othello::TurnTaker;
 *
 *   TurnTaker::Update update;
 *   connection.SendComponentUpdate< TurnTaker >(entity_id, update);
 *
 *   dispatcher.OnComponentUpdate< TurnTaker >(
 *       [&](const worker::ComponentUpdateOp< TurnTaker >& op) {
 *         worker::EntityId entity_id = op.GetEntityId();
 *         TurnTaker::Update update = op.GetUpdate();
 *       });
 *
 *   TurnTaker::Data data = entity.Get< TurnTaker >();
 */
struct IMPROBABLE_DLL_API TurnTaker : ::worker::detail::ComponentMetaclass {
  static constexpr const ::worker::ComponentId ComponentId = 1003;
  static const ::worker::detail::internal::WorkerProtocol_ComponentVtable& Vtable();
  using Data = ::othello::TurnTakerData;
  using GenericCommandObject = ::othello::detail::GenericCommandObject_TurnTaker;

  class IMPROBABLE_DLL_API Update {
  public:
    // Default-constructible, copyable and movable.
    Update() = default;
    Update(Update&&) = default;
    Update(const Update&) = default;
    Update& operator=(Update&&) = default;
    Update& operator=(const Update&) = default;
    ~Update() = default;

    bool operator==(const Update&) const;
    bool operator!=(const Update&) const;

    /** Creates an Update from a ::othello::TurnTakerData object. */
    static Update FromInitialData(const ::othello::TurnTakerData& data);

    /**
     * Converts to a ::othello::TurnTakerData
     * object. It is an error to call this function unless *all* of the optional fields in this
     * update are filled in.
     */
    ::othello::TurnTakerData ToInitialData() const;

    /**
     * Replaces fields in the given ::othello::TurnTakerData
     * object with the corresponding fields in this update, where present.
     */
    void ApplyTo(::othello::TurnTakerData&) const;
  };

  /**
   * Command metaclasses for the TurnTaker component.
   * Each metaclass can be supplied as the template parameter to all command-related templated
   * types and methods in the C++ worker API.
  */
  class IMPROBABLE_DLL_API Commands {
  public:
    class YourTurn {
    public:
      static constexpr const std::uint32_t CommandId = 1;
      using ComponentMetaclass = ::othello::TurnTaker;
      using Request = ::othello::Void;
      using Response = ::othello::Void;
    };
  };
};

// Implementation details.
//----------------------------------------------------------------

namespace detail {

void Write_ColorData(const ::othello::ColorData&, ::worker::detail::internal::Pbio_Object*);

::othello::ColorData Read_ColorData(::worker::detail::internal::Pbio_Object*);

void Write_CreatePlayerResult(const ::othello::CreatePlayerResult&, ::worker::detail::internal::Pbio_Object*);

::othello::CreatePlayerResult Read_CreatePlayerResult(::worker::detail::internal::Pbio_Object*);

void Write_FindColorRequest(const ::othello::FindColorRequest&, ::worker::detail::internal::Pbio_Object*);

::othello::FindColorRequest Read_FindColorRequest(::worker::detail::internal::Pbio_Object*);

void Write_GameData(const ::othello::GameData&, ::worker::detail::internal::Pbio_Object*);

::othello::GameData Read_GameData(::worker::detail::internal::Pbio_Object*);

void Write_PlaceDiscRequest(const ::othello::PlaceDiscRequest&, ::worker::detail::internal::Pbio_Object*);

::othello::PlaceDiscRequest Read_PlaceDiscRequest(::worker::detail::internal::Pbio_Object*);

void Write_PlayerData(const ::othello::PlayerData&, ::worker::detail::internal::Pbio_Object*);

::othello::PlayerData Read_PlayerData(::worker::detail::internal::Pbio_Object*);

void Write_SuccessResult(const ::othello::SuccessResult&, ::worker::detail::internal::Pbio_Object*);

::othello::SuccessResult Read_SuccessResult(::worker::detail::internal::Pbio_Object*);

void Write_TurnTakerData(const ::othello::TurnTakerData&, ::worker::detail::internal::Pbio_Object*);

::othello::TurnTakerData Read_TurnTakerData(::worker::detail::internal::Pbio_Object*);

void Write_Void(const ::othello::Void&, ::worker::detail::internal::Pbio_Object*);

::othello::Void Read_Void(::worker::detail::internal::Pbio_Object*);

}  // ::detail
}  // ::othello

#endif  // SPATIALOS_SCHEMA_othello_schema_15265274617727986021_INCLUDED
